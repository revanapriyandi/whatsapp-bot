// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// u can use other providers like, postgreSQL, mariaDB, mySQL or other, just read prisma docs
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

/// Storing sessions information
model Sessions {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String  @unique
  session   String?
}

/// Storing group information
model Group {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  /// Whatsapp group Jid
  groupId      String      @unique
  /// Group Name
  name         String
  /// Whatsapp group default language
  language     String
  /// Opts for notify all group events
  notify       Boolean     @default(false)
  /// Opts for notify welcome message
  welcome      Boolean     @default(false)
  /// Opts for notify leave message
  leave        Boolean     @default(false)
  /// Is Group got ban?
  ban          Boolean     @default(false)
  /// Is Group got mute?
  mute         Boolean     @default(false)
  /// Opts for anti whatsapp group link
  antilink     Boolean     @default(false)
  /// Opts for anti other whatsapp bot
  antibot      Boolean     @default(false)
  /// Opts for anti viewonce message
  antiviewonce Boolean     @default(false)
  /// Opts for anti other country, by country number code
  anticountry  AntiCountry
}

type AntiCountry {
  /// ["51", "60"] will kick member that has number that start from "51, 60" (List country number code)
  number String[]
  /// Its active?
  active Boolean
}

model GroupMetadata {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  /// Whatsapp group Jid
  groupId      String         @unique
  /// Whatsapp group Name
  subject      String
  /// Whatsapp group creation date
  creation     Int
  /// Whatsapp group owner
  owner        String
  /// Whatsapp group description
  desc         String
  /// Whatsapp group restrict, only admin allow to edit group
  restrict     Boolean        @default(false)
  /// Whatsapp group restrict, only admin allow to send message 
  announce     Boolean        @default(false)
  /// Whatsapp group participant list
  participants Participants[]
}

type Participants {
  /// Participant Jid
  id    String
  /// Is participant an admin?
  admin GroupAdmin?
}

enum GroupAdmin {
  admin
  superadmin
}

/// Storing users session
model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  /// Whatsapp user Jid
  userId    String  @unique
  /// Whatsapp user Name
  name      String
  /// Whatsapp user language
  language  String
  /// Whatsapp user limit
  limit     Int
  /// Is user got ban?
  ban       Boolean @default(false)
  /// User role
  role      Role    @default(basic)
  /// User role expired if has role (premium, vip)
  expire    Int     @default(0)
  /// User Chatbot 
  chatbot   Boolean @default(false)
  /// Is User New?
  isNew     Boolean @default(true)
  /// ramadhan reminder
  ramadhan  Boolean @default(false)
  /// add latitude and longitude for user
  latitude  Float?
  longitude Float?
  /// add user timezone
  timezone  String?
}

enum Role {
  basic
  premium
  vip
}

model feedback {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  /// User Jid
  userId  String
  /// User feedback
  message String
}
